apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // ndk生成的.so文件，通常我们不是放到jni目录中的,需要进行以下设置
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            /*
            * 采用下面这种方法也是一样的
            * jniLibs {
            *  srcDir 'libs'
            * }
            *
            * 这样也可以
            * sourceSets.main {
            *    jniLibs.srcDir 'libs' // <-- Set your folder here!
            * }
            */
        }
    }
}

// 统一定义版本号
ext {
    SupportLibVersion = "25.0.0"
    RetrofitVersion = "2.1.0"
    RxLifecycleVersion = "1.0"
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    // 编译Support v4包
    compile "com.android.support:support-v4:${SupportLibVersion}"
    // 编译Support v7包
    compile "com.android.support:appcompat-v7:${SupportLibVersion}"
    // 编译v7包的RecyclerView
    compile "com.android.support:recyclerview-v7:${SupportLibVersion}"
    // 编译Support Design Library
    compile "com.android.support:design:${SupportLibVersion}"
    // 编译Support Annotations
    compile "com.android.support:support-annotations:${SupportLibVersion}"

    // 编译RxJava
    compile 'io.reactivex:rxjava:1.2.2'
    // 编译RxAndroid
    compile 'io.reactivex:rxandroid:1.2.1'
    // 编译RxLifecycle(防止由于没有及时取消订阅而造成的的内存泄漏问题)
    compile "com.trello:rxlifecycle:${RxLifecycleVersion}"
    // If you want to bind to Android-specific RxLifecycle
    compile "com.trello:rxlifecycle-android:${RxLifecycleVersion}"
    // If you want pre-written Activities and Fragments you can subclass as providers
    compile "com.trello:rxlifecycle-components:${RxLifecycleVersion}"
    // If you want to use Navi for providers
    compile "com.trello:rxlifecycle-navi:${RxLifecycleVersion}"
    // If you want to use Kotlin syntax
    compile "com.trello:rxlifecycle-kotlin:${RxLifecycleVersion}"

    // 编译Retrofit网络加载框架(默认编译了OkHttp)
    compile "com.squareup.retrofit2:retrofit:${RetrofitVersion}"
    // 编译Retrofit对Gson的支持
    compile "com.squareup.retrofit2:converter-gson:${RetrofitVersion}"
    // 编译Retrofit对RxJava的支持
    compile "com.squareup.retrofit2:adapter-rxjava:${RetrofitVersion}"
    // 编译Glide图片加载框架
    compile 'com.github.bumptech.glide:glide:3.7.0'
    // 编译PhotoView图片缩放框架
    //compile 'com.github.chrisbanes:PhotoView:{1.3.0}'
    // 编译一个中文的PhotoView(上面的用不了,先用这个取而代之)
    compile 'com.bm.photoview:library:1.4.1'
    // 编译NavigationTabBar
    compile 'com.github.devlight.navigationtabbar:navigationtabbar:1.2.5'
    // 编译RecyclerView的万能适配器
    compile 'com.zhy:base-rvadapter:3.0.3'
    // 编译XRecyclerView
    compile 'com.jcodecraeer:xrecyclerview:1.2.7'
    // 编译Material Dialogs风格的对话框
    compile 'com.afollestad.material-dialogs:core:0.9.0.2'
    // 编译时间日期选择器(类似于QQ)
    compile 'com.bigkoo:pickerview:2.1.1'
    // 编译炫酷的SearchView
    compile 'com.github.arimorty:floatingsearchview:2.0.3'
    // 编译BoomMenuButton
    compile 'com.nightonke:boommenu:1.0.9'
    // 编译SuperTextView(一个可已自行组合属性配置出属于自己风格的样式的TextView)
    compile 'com.github.lygttpod:SuperTextView:1.0.4'
    // 编译CircleImageView(一个非常漂亮的圆形ImageView)
    compile 'de.hdodenhof:circleimageview:2.1.0'
    // 编译SlidingLayout(上拉下拉弹跳效果和iOS的ListView的果冻效果)
    compile 'homhomlin.lib:sldinglayout:0.9.0'
}
